[{"ReturnType":[{"type":"ref:ObjectID"}],"Description":["Returns the base object id of the reference."],"Name":"GetBaseObject","Alias":"gbo","Version":"1.1","Convention":"R","Tags":["Reference"]},{"ReturnType":[{"type":"ref:ObjectID"}],"Description":["Returns the permanent base object id of the reference."],"Examples":[{"Example":["ref DeathClawBase","set DeathClawBase to SomeLeveledDeathClawREF.GetBaseForm"]}],"Name":"GetBaseForm","Alias":"gbf","Version":"3.1","Convention":"E","Tags":["Reference"]},{"ReturnType":[{"type":"bool:IsPersistent"}],"Description":["Returns true if the calling reference is persistent."],"Examples":[{"Example":["if SomeRef.IsPersistent","    ; it is safe to proceed","endif"]}],"Name":"IsPersistent","Version":"1.1","Convention":"R","Tags":["Reference"]},{"ReturnType":[{"type":"ref:Cell"}],"Description":["Returns the parent cell of the reference."],"Name":"GetParentCell","Alias":"gpc","Version":"1.1","Convention":"E","Tags":["Reference"]},{"ReturnType":[{"type":"ref:ParentWorldspace"}],"Description":["Returns the parent worldspace of the reference."],"Name":"GetParentWorldspace","Alias":"gpw","Version":"1.1","Convention":"R","Tags":["Reference"]},{"ReturnType":[{"type":"ref:Cell"}],"Description":["Returns the cell to which the calling door reference teleports."],"Name":"GetTeleportCell","Version":"1.1","Convention":"R","Tags":["Reference"]},{"ReturnType":[{"type":"ref:LinkedDoor"}],"Description":["Returns the door to which the calling reference is linked."],"Name":"GetLinkedDoor","Version":"1.1","Convention":"R","Tags":["Reference"]},{"ReturnType":[{"type":"ref:Owner"}],"Description":["Returns the owner of the calling reference."],"Name":"GetOwner","Version":"1.9","Convention":"B","Tags":["Owner"]},{"ReturnType":[{"type":"ref:Owner"}],"Description":["Returns the owner of the cell of the calling reference."],"Name":"GetParentCellOwner","Version":"2.1","Convention":"B","Tags":["Owner"]},{"ReturnType":[{"type":"int:Rank"}],"Description":["Returns the required rank for ownership of the calling reference."],"Name":"GetOwningFactionRequiredRank","Version":"2.1","Convention":"B","Tags":["Owner"]},{"ReturnType":[{"type":"int:Rank"}],"Description":["Returns the required rank for ownership of the cell of the calling reference."],"Name":"GetParentCellOwningFactionRequiredRank","Version":"2.1","Convention":"B","Tags":["Owner"]},{"Parameters":[{"url":"Form_Type_IDs","type":"int:FormType","optional":"true"},{"type":"int:CellDepth","optional":"true"},{"type":"bool:IncludeTakenRefs:","optional":"true"}],"ReturnType":[{"type":"ref:ObjectRef"}],"Description":["Returns the first reference in the current cell. A type can optionally be supplied to return only references matching that type. Additionally, you can pass 200 for actors and 201 for inventory items. This function should be used only within a Label...Goto loop and GetNextRef.","An optional cell depth can be supplied to specify the number of adjacent cells to scan in exteriors: a cell depth of 1 scans the player's current cell plus 8 adjacent cells, a depth of 2 scans the player's cell plus 25 adjacent cells.","By default, inactive references to items which were previously picked up by an actor are ignored; passing 1 for the third parameter will force those references to be included."],"Name":"GetFirstRef","Version":"1.1","Convention":"R","Tags":["Reference"]},{"ReturnType":[{"type":"ref:ObjectRef"}],"Description":["Returns the next reference of a given type in the current cell. GetFirstRef or GetFirstRefInCell must be called first; the formType, cellDepth, and boolean arguments passed to GetFirstRef/GetFirstRefInCell are used. This command should only be used within a loop that executes within a single frame."],"Name":"GetNextRef","Version":"1.1","Convention":"R","Tags":["Reference"]},{"Parameters":[{"url":"Form_Type_IDs","type":"int:FormType","optional":"true"},{"type":"int:CellDepth","optional":"true"},{"type":"bool:IncludeTakenRefs","optional":"true"}],"ReturnType":[{"type":"Integer"}],"Description":["Returns the number of references in the current cell which match the optionally supplied type code. Use 200 for actors and 201 for inventory items. An optional cell depth can be specified for exteriors. By default, inactive references to items which were previously picked up by an actor are ignored; passing 1 for the third parameter will force those references to be included."],"Name":"GetNumRefs","Version":"1.1","Convention":"R","Tags":["Reference"]},{"Parameters":[{"url":"Form_Type_IDs","type":"int:TypeID","optional":"true"},{"type":"int:CellDepth","optional":"true"},{"type":"bool:IncludeTakenRefs","optional":"true"}],"ReturnType":[{"type":"array_var:CellRefs"}],"Description":["Used in place of <a href=\"GetFirstRef\">GetFirstRef</a> to get an array of all the references in the current cell and optionally the surrounding cells.","Setting cell depth to -1 will use the uGridsToLoad value."],"Examples":[{"Example":["array_var ar_cellContents","array_var ar_element"," ","let ar_cellContents := GetRefs 200 2        ; find actor refs within 2 cells","ForEach ar_element <- ar_cellContents","        ; do what needs to be done here","        ; maybe we have a condition that skips the rest so use","        Continue","        ; or another condition that ends the loop, so","        Break","Loop"]}],"Name":"GetRefs","Version":"4.5 b7","Convention":"B","Tags":["Reference"]},{"Parameters":[{"type":"ref:Cell"},{"url":"Form_Type_IDs","type":"int:FormType","optional":"true"},{"type":"int:CellDepth","optional":"true"},{"type":"bool:IncludeTakenRefs","optional":"true"}],"ReturnType":[{"type":"ref:ObjectRef"}],"Description":["Works the same as GetFirstRef but takes an additional parameter specifying the cell to scan. Note that if the specified is not loaded in memory, this function will only return persistent references. Use GetNextRef to iterate through the rest of the references in the cell."],"Examples":[{"Example":["let rRef := GetFirstRefInCell 200 2        ; find actor refs within 2 cells","While (IsFormValid rRef)","        ; do stuff","        let rRef := GetNextRef","Loop"]}],"Name":"GetFirstRefInCell","Version":"1.1","Convention":"R","Tags":["Reference"]},{"Parameters":[{"type":"cell:TargetCell"},{"url":"Form_Type_IDs","type":"int:TypeID","optional":"true"},{"type":"int:CellDepth","optional":"true"},{"type":"bool:IncludeTakenRefs","optional":"true"}],"ReturnType":[{"type":"array_var:CellRefs"}],"Description":["Used in place of <a href=\"GetFirstRefInCell\">GetFirstRefInCell</a> to get an array of all the references in a cell (and optional surrounding cells).","Setting cell depth to -1 will use the uGridsToLoad value."],"Examples":[{"Example":["array_var ar_cellContents","array_var ar_element"," ","let ar_cellContents := GetRefsInCell TargetCell 200        ; find actor refs in TargetCell","ForEach ar_element <- ar_cellContents","        ; do what needs to be done here","Loop"]}],"Name":"GetRefsInCell","Version":"4.5 b7","Convention":"B","Tags":["Reference"]},{"Parameters":[{"type":"ref:Cell"},{"url":"Form_Type_IDs","type":"int:FormType","optional":"true"},{"type":"int:CellDepth","optional":"true"},{"type":"bool:IncludeTakenRefs:","optional":"true"}],"ReturnType":[{"type":"int:Count"}],"Description":["Works the same as GetNumRefs but takes an additional parameter specifying the cell to scan. Only counts persistent references if the cell is not loaded in memory."],"Name":"GetNumRefsInCell","Version":"1.1","Convention":"R","Tags":["Reference"]},{"ReturnType":[{"type":"int:RefCount"}],"Description":["Returns the count in a stacked reference."],"Name":"GetRefCount","Version":"1.1","Convention":"R","Tags":["Reference"]},{"Parameters":[{"type":"int:NewCount"}],"Description":["Sets the number of items in a stack of items in the world. Note that while this function will change the count of any type of reference, it may have unpredictable results when used on references like NPCs which are not logically stackable."],"Name":"SetRefCount","Version":"1.1","Convention":"R","Tags":["Reference"]},{"ReturnType":[{"type":"ref:ObjectID"}],"Description":["Returns the key associated with a lockable object."],"Name":"GetOpenKey","Alias":"GetKey","Version":"1.6","Convention":"R","Tags":["Reference"]},{"Parameters":[{"type":"ref:ObjectID"}],"Description":["Sets the key used to unlock the calling object."],"Name":"SetOpenKey","Alias":"SetKey","Version":"3.3","Convention":"R","Tags":["Input"]},{"Description":["Clears the key used to unlock the calling object."],"Name":"ClearOpenKey","Alias":"ClearKey","Version":"3.4","Convention":"R","Tags":["Input"]},{"Parameters":[{"type":"actor base:ActorBase","optional":"true"}],"ReturnType":[{"url":"Actor_Flags","type":"int:ActorFlagsLow"}],"Description":["Returns a bitfield containing actor base flags."],"Name":"GetActorBaseFlagsLow","Version":"2.6","Convention":"E","Tags":["Reference"]},{"Parameters":[{"url":"Actor_Flags","type":"int:ActorFlagsLow"},{"type":"ref:NPC","optional":"true"}],"Description":["Sets the flags of the actor. Use of unknown bits may cause random behavior."],"Name":"SetActorBaseFlagsLow","Version":"2.6","Convention":"E","Tags":["Reference"]},{"Parameters":[{"type":"actor base:ActorBase","optional":"true"}],"ReturnType":[{"url":"Actor_Flags","type":"int:ActorFlagsHigh"}],"Description":["Returns a bitfield containing actor base flags."],"Name":"GetActorBaseFlagsHigh","Version":"2.6","Convention":"E","Tags":["Reference"]},{"Parameters":[{"url":"Actor_Flags","type":"int:ActorFlagsHigh"},{"type":"ref:NPC","optional":"true"}],"Description":["Sets actor base flags."],"Name":"SetActorBaseFlagsHigh","Version":"2.6","Convention":"E","Tags":["Reference"]},{"Parameters":[{"type":"ref:ObjectRef","optional":"true"}],"Description":["Check if an NPC has direct or indirect ownership."],"Name":"HasOwnership","Version":"3.1","Condition":"Yes","Convention":"E","Tags":["Reference"]},{"Parameters":[{"type":"actor reference:Actor","optional":"true"}],"Description":["Check if an object is directly or indirectly owned by an NPC."],"Name":"IsOwned","Version":"3.1","Condition":"Yes","Convention":"E","Tags":["Reference"]},{"Parameters":[{"type":"int:Rank"}],"Description":["Sets the required rank for ownership of the calling reference."],"Name":"SetOwningFactionRequiredRank","Version":"3.1","Convention":"B","Tags":["Reference"]},{"Parameters":[{"type":"body data:AnyForm"},{"type":"base NPC:NPC","optional":"true"}],"Description":["Set an NPCs eyes."],"Name":"SetEyes","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"ref:NPC","optional":"true"}],"Description":["Get an NPCs eyes."],"Name":"GetEyes","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"body data:AnyForm"},{"type":"base NPC:NPC","optional":"true"}],"Description":["Set an NPCs hair."],"Name":"SetHair","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"ref:NPC","optional":"true"}],"Description":["Set an NPCs hair."],"Name":"GetHair","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"float:HairLength"},{"type":"ref:NPC","optional":"true"}],"Description":["Set an NPCs hair length."],"Name":"SetHairLength","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"ref:NPC","optional":"true"}],"Description":["Get an NPCs hair length."],"Name":"GetHairLength","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"int:HairColor"},{"type":"ref:NPC","optional":"true"}],"Description":["Set an NPCs hair color (RGB bytes)."],"Name":"SetHairColor","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"ref:NPC","optional":"true"}],"Description":["Get an NPCs hair color (code."],"Name":"GetHairColor","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"float:Weight"},{"type":"ref:NPC","optional":"true"}],"Description":["Set an NPCs weight."],"Name":"SetNPCWeight","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"ref:NPC","optional":"true"}],"Description":["Get an NPCs weight."],"Name":"GetNPCWeight","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"float:Weight"},{"type":"ref:NPC","optional":"true"}],"Description":["Set an NPCs height."],"Name":"SetNPCHeight","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Parameters":[{"type":"ref:NPC","optional":"true"}],"Description":["Get an NPCs height."],"Name":"GetNPCHeight","Version":"4.1","Convention":"E","Tags":["Actor"]},{"Description":["Updates the visual representation of the calling reference."],"Name":"Update3D","Version":"4.1","Convention":"E","Tags":["Reference"]},{"ReturnType":[{"type":"bool:IsSwimming"}],"Description":["Check if the player is swimming."],"Name":"IsPlayerSwimming","Version":"4.2","Convention":"B","Tags":["Reference"]},{"ReturnType":[{"type":"bool:CameraActive"}],"Description":["Returns wether or not Fly Camera is active."],"Name":"GetTFC","Version":"4.2","Convention":"B","Tags":["Reference"]},{"Parameters":[{"type":"reference:Target"},{"type":"int:CellDepth","optional":"True"},{"type":"bool:IncludeTakenRefs","optional":"True"}],"ReturnType":[{"type":"bool:"}],"Description":["Similar to GetInSameCell, but checks a grid of cells, making it useful for exteriors. Returns true (1) if the specified reference is within the grid of cells centered on the player, the size of which is specified by depth. Depth defaults to 0, a value of &lt;b&gt;-1&lt;/b&gt; will use the uGrids to load setting. "],"Examples":[{"Example":["&lt;pre&gt;","if GetInGrid SunnyREF, 1","   ; Sunny is in the same or a next cell to the player (depth 1 = 3x3 cell grid)","","if GetInGrid SunnyREF, -1","   ; Sunny is within uGrid range of the player","&lt;/pre&gt;"]}],"Name":"GetInGrid","Version":"4.6 b1","Condition":"False","Convention":"E","Tags":["NVSE"]},{"Parameters":[{"type":"cell:Center"},{"type":"reference:Target"},{"type":"int:CellDepth","optional":"True"},{"type":"bool:IncludeTakenRefs","optional":"True"}],"ReturnType":[{"type":"bool:"}],"Description":["As [GetInGrid,GetInGrid], but the center cell of the grid is specified rather than using that of the player. "],"Name":"GetInGridInCell","Version":"4.6 b1","Condition":"False","Convention":"E","Tags":["NVSE"]}]