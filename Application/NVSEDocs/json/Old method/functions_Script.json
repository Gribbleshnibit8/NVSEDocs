[{"Parameters":[{"type":"ref:ObjectID","optional":"true"}],"ReturnType":[{"type":"bool:IsScripted"}],"Description":["Returns 1 if the object or reference has a script attached to it."],"Name":"IsScripted","Version":"1.3","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"ref:ObjectID","optional":"true"}],"ReturnType":[{"type":"ref:ScriptID"}],"Description":["Returns the script of the reference or passed object."],"Name":"GetScript","Version":"1.3","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"ref:ObjectID","optional":"true"}],"ReturnType":[{"type":"ref:OldScript"}],"Description":["Removes the script of the reference or passed object."],"Name":"RemoveScript","Version":"1.3","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"ref:ScriptID"},{"type":"ref:ObjectID","optional":"true"}],"ReturnType":[{"type":"ref:OldScript"}],"Description":["Sets the specified script onto the calling object and Returns any previous script. Note that Oblivion doesn't have a script variable type so you must assign the script to a ref variable for this to work.","NOTE: If the specified object already has a script attached to it, after changing the script the stored values of local variables for references to that object will not match the variables in the new script. If called on a reference, the variable list for the calling reference will be updated to match the new script, but other references to the same base object will not be updated.","Summary: SetScript is safe to use with quests, with previously unscripted objects, and on unique references (for which no other references exist to the same base object). Using the command on base objects for which non-unique references exist may result in undefined behavior."],"Name":"SetScript","Version":"1.3","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"ref:ObjectID","optional":"true"}],"ReturnType":[{"type":"bool:Valid"}],"Description":["Returns 1 if the object passed in the ref variable is valid. Returns 0 if the object stored in the variable is not currently loaded in memory (for instance, a non-persistent reference) or if the variable doesn't hold any object."],"Name":"IsFormValid","Version":"1.3","Condition":"False","Convention":"E"},{"Parameters":[{"type":"ref:ObjectRef"}],"ReturnType":[{"type":"bool:IsReference"}],"Description":["Returns 1 if the specified ref variable contains a reference, as opposed to a base object."],"Name":"IsReference","Version":"1.3","Condition":"False","Convention":"B"},{"Parameters":[{"type":"string:VariableName"},{"type":"ref:QuestID","optional":"true"}],"ReturnType":[{"type":"float:VariableValue"}],"Description":["Looks up the value of a variable by name."],"Name":"GetVariable","Version":"4.1","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"string:VariableName"},{"type":"ref:QuestID","optional":"true"}],"ReturnType":[{"type":"bool:HasVariable"}],"Description":["Returns true if the script has a variable with the specified name."],"Name":"HasVariable","Version":"4.1","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"string:VariableName"},{"type":"ref:QuestID","optional":"true"}],"ReturnType":[{"type":"ref:VariableValue"}],"Description":["Looks up the value of a ref variable by name."],"Name":"GetRefVariable","Version":"4.1","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"string:VariableName"},{"type":"ref:QuestID","optional":"true"}],"ReturnType":[{"type":"array_var:ArrayVariableValue"}],"Description":["Looks up an array variable by name on the calling object or specified quest."],"Name":"GetArrayVariable","Alias":"GetArrayVar","Version":"4.1","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"string:VariableName"},{"type":"float:NewValue"},{"type":"ref:QuestID","optional":"true"}],"Description":["Sets the value of a variable by name."],"Name":"SetVariable","Version":"4.5","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"string:VariableName"},{"type":"ref:NewValue"},{"type":"ref:QuestID","optional":"true"}],"Description":["Sets the value of a variable by name."],"Name":"SetRefVariable","Version":"4.5","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"formID:Script"},{"type":"formID:Script"}],"ReturnType":[{"type":"bool:Identical"}],"Description":["Returns true if the compiled scripts are identical."],"Name":"CompareScripts","Version":"4.1","Condition":"False","Convention":"E","Tags":["Script"]},{"Description":["Sets all variables in a script to zero."],"Name":"ResetAllVariables","Version":"4.1","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"formID:Script","optional":"true"}],"Description":["Returns the number of literal references in a script."],"Name":"GetNumExplicitRefs","Version":"4.1","Condition":"False","Convention":"E","Tags":["Script"]},{"Parameters":[{"type":"int:Index"},{"type":"formID:Script","optional":"true"}],"ReturnType":[{"type":"ref:Object"}],"Description":["Returns the nth literal reference in a script."],"Name":"GetNthExplicitRef","Version":"4.1","Condition":"False","Convention":"B","Tags":["Script"]},{"ReturnType":[{"type":"formID:Script"}],"Description":["Returns the script which is currently executing."],"Name":"GetCurrentScript","Version":"4.1","Condition":"False","Convention":"B","Tags":["Script"]},{"ReturnType":[{"type":"formID:Script"}],"Description":["Returns the script that called the executing function script."],"Name":"GetCallingScript","Version":"4.1","Condition":"False","Convention":"B","Tags":["Script"]},{"Parameters":[{"optional":"False"},{"optional":"False"}],"Description":["Sets an event handler, that is a User Defined Function that will be called when the event fire.","You can filter by source, ie on which reference the event occurs, and by object, ie which object the interacted with the source to fire the event","The source pair is expected to be either ref::aRef or first::aRef or ref::aFormList or ref::aBaseForm or first::aFormList or first::aBaseForm","The object pair is expected to be either object::aForm or second::aForm or object::aFormList or second::aFormList","If the source or the object is a form list, then SetEventHandler will be called in turn for each member of the form list.","If one of the member is another form list, the process is called recursively. (There is no attempt at detecting loops in list)"],"Examples":[{"Example":["SetEventHandler eventName eventUDF [pair:source] [pair:object]"]},{"Example":["The source pair is expected to be either ref::aRef or first::aRef or ref::aFormList or ref::aBaseForm or first::aFormList or first::aBaseForm"]},{"Example":["The object pair is expected to be either object::aForm or second::aForm or object::aFormList or second::aFormList"]}],"Name":"SetEventHandler","Version":"4.6 b1","Convention":"E","Tags":["event"]},{"Parameters":[{"optional":"False"},{"optional":"False"}],"Description":["Removes an event handler previously registered by [SetEventHandler,SetEventHandler], same syntax as SetEventHandler.","If using a formlist for object, it is not required that this list be identical to the list used for SetEventHandler."],"Name":"RemoveEventHandler","Version":"4.6 b1","Convention":"E","Tags":["event"]},{"ReturnType":[{"type":"event:eventName"}],"Description":["Use inside the event handler UDF. Returns the eventName of the currently fired event. Useful if the same UDF handle more than one event."],"Examples":[{"Example":["let aStringVar := GetCurrentEventName"]},{"Example":[]}],"Name":"GetCurrentEventName","Version":"4.6 b1","Condition":"False","Convention":"E","Tags":["event"]},{"Parameters":[{"type":"string:eventName","optional":"False"},{"type":"stringmap:args","optional":"False"},{"type":"string:senderName","optional":"False"}],"ReturnType":[{"type":"bool:dispatched"}],"Description":["Dispatches a user-defined event to any registered listeners. The eventName parameter specifies the event that occurred; this should be fairly unique to prevent event name clashes between different mods, but the event handler can also disambiguate name clashes by checking the name of the event sender if necessary. The optional second parameter is a StringMap containing any additional information about the event. When the event is dispatched, the array will also include the event name and the name of the sender. If omitted, the name of the sender is the filename from which the event originated; otherwise it matches the supplied third argument.","You cannot filter on User defined Events!"],"Examples":[{"Example":["(dispatched:bool) DispatchEvent eventName:string args:StringMap senderName:string"]}],"Name":"DispatchEvent","Version":"4.6 b1","Condition":"False","Convention":"E"}]